# vgg_model.py
import tensorflow as tf
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import os

# Charger les données GTZAN (assurez-vous d'ajuster le chemin)
data_dir = '../data/GTZAN'
genres = os.listdir(os.path.join(data_dir, 'images_original'))

# Images (à titre d'exemple)
X = []
y = []

for genre in genres:
    genre_dir = os.path.join(data_dir, 'images_original', genre)
    for filename in os.listdir(genre_dir):
        file_path = os.path.join(genre_dir, filename)
        image = load_img(file_path, target_size=(224, 224))
        image_array = img_to_array(image)
        X.append(image_array)
        y.append(genre)

# Convertir en numpy array
X = np.array(X)
y = np.array(y)

# Convertir les étiquettes en nombres
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Diviser les données
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Télécharger le modèle VGG19 pré-entraîné
base_model = VGG19(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation='relu')(x)
predictions = Dense(len(genres), activation='softmax')(x)
model_vgg19 = Model(inputs=base_model.input, outputs=predictions)

# Entraîner le modèle avec un callback pour sauvegarder le meilleur modèle
model_vgg19.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
checkpoint = ModelCheckpoint('/data/GTZAN/best_model_vgg19.h5', save_best_only=True, monitor='val_loss', mode='min', verbose=1)
model_vgg19.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test), callbacks=[checkpoint])

# Enregistrer le modèle VGG19
model_vgg19.save('models/vgg19_model.h5')

